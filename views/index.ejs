<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Spotify Currently Playing Track</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #121212;
            color: #ffffff;
            text-align: center;
            padding: 20px;
        }
        h1 {
            color: #1DB954; /* Spotify Green */
        }
        #currently-playing {
            background-color: #282828;
            border-radius: 10px;
            padding: 20px;
            margin: 20px auto;
            max-width: 400px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
        }
        img {
            border-radius: 10px;
            margin-top: 10px;
        }
        button {
            background-color: #1DB954; /* Spotify Green */
            color: white;
            border: none;
            border-radius: 5px;
            padding: 10px 20px;
            cursor: pointer;
            font-size: 16px;
        }
        button:hover {
            background-color: #1AA34A; /* Darker green on hover */
        }
    </style>
</head>
<body>
    <h1>Spotify Currently Playing Track</h1>
    <button id="login-btn">Login with Spotify</button>
    <div id="currently-playing">
        <h2>Track Info</h2>
        <p id="track-name">Track Name: N/A</p>
        <p id="artist-name">Artist: N/A</p>
        <p id="album-name">Album: N/A</p>
        <img id="album-cover" src="" alt="Album Cover" style="width:100%; height:auto;">
    </div>

    <script>
        const clientId = '<%= clientId %>';  // This will be replaced by EJS
        const redirectUri = 'http://localhost:3000'; // Replace with your Redirect URI

        const scopes = 'user-read-playback-state user-read-currently-playing';
        let accessToken = null;
        let currentTrackId = null;

        function getAccessTokenFromUrl() {
            const hash = window.location.hash;
            if (!hash) return null;
            const params = new URLSearchParams(hash.substring(1));
            return params.get('access_token');
        }

        function authorizeUser() {
            const authUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&redirect_uri=${encodeURIComponent(redirectUri)}&scope=${encodeURIComponent(scopes)}`;
            window.location = authUrl;
        }

        async function getCurrentlyPlayingTrack() {
            const response = await fetch('https://api.spotify.com/v1/me/player/currently-playing', {
                headers: {
                    'Authorization': `Bearer ${accessToken}`
                }
            });

            if (response.ok) {
                const data = await response.json();
                updateTrackInfo(data);
            } else if (response.status === 204) {
                updateTrackInfo(null);
            } else {
                alert('Failed to get currently playing track. Please make sure you are playing something on Spotify.');
            }
        }

        function updateTrackInfo(data) {
            if (data && data.item) {
                const newTrackId = data.item.id;
                if (currentTrackId !== newTrackId) {
                    currentTrackId = newTrackId;
                    document.getElementById('track-name').textContent = `Track Name: ${data.item.name}`;
                    document.getElementById('artist-name').textContent = `Artist: ${data.item.artists[0].name}`;
                    document.getElementById('album-name').textContent = `Album: ${data.item.album.name}`;
                    document.getElementById('album-cover').src = data.item.album.images[0].url;
                }
            } else {
                document.getElementById('track-name').textContent = 'Track Name: N/A';
                document.getElementById('artist-name').textContent = 'Artist: N/A';
                document.getElementById('album-name').textContent = 'Album: N/A';
                document.getElementById('album-cover').src = '';
            }
        }

        function startPolling() {
            setInterval(getCurrentlyPlayingTrack, 2000);
        }

        window.onload = () => {
            // Get access token from URL
            accessToken = getAccessTokenFromUrl();
            // Check if access token exists
            if (accessToken) {
                // Start polling for the currently playing track
                startPolling();
                // Immediately fetch the currently playing track
                getCurrentlyPlayingTrack();
            }
        };

        // Event listener for the login button
        document.getElementById('login-btn').addEventListener('click', authorizeUser);
    </script>
</body>
</html>
